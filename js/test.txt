


var DOMModelObject = null;
var regexOccurrenceMap = null;
var options = null;
var index = null;
var regex = null;

var installed = null;

//Inject content scripts into pages on installed (not performed automatically)
browser.runtime.onInstalled.addListener(function(details) {
    installed = {details: details};

    var manifest = browser.runtime.getManifest();
    var scripts = manifest.content_scripts[0].js;
    var css = manifest.content_scripts[0].css;

    browser.tabs.query({}, function (tabs) {
        for(var tabIndex = 0; tabIndex < tabs.length; tabIndex++) {
            var url = tabs[tabIndex].url;
            //if(url.match(/chrome:\/\/.*/) || url.match(/https:\/\/chrome.google.com\/webstore\/.*/))
            //    continue;

            for (var i = 0; i < scripts.length; i++)
                browser.tabs.executeScript(tabs[tabIndex].id, {file: scripts[i]});

            for (i = 0; i < css.length; i++)
                browser.tabs.insertCSS(tabs[tabIndex].id, {file: css[i]});
        }
    });
});

browser.runtime.onConnect.addListener(function(port) {
    if(port.name != 'popup_to_backend_port')
        return;

    if(installed) {
        port.postMessage({action: "install", details: installed.details});
        installed = null;
    }

    browser.tabs.query({active: true, currentWindow: true}, function (tabs) {
        browser.tabs.sendMessage(tabs[0].id, {action: 'highlight_restore'});

        //Invoke action on message from popup script
        port.onMessage.addListener(function (message) {
            invokeAction(message.action, port, tabs[0].id, message);
        });

        //Handle extension close
        port.onDisconnect.addListener(function() {
            if(!options || !options.persistent_highlights)
                browser.tabs.sendMessage(tabs[0].id, {action: 'highlight_restore'});

            var uuids = getUUIDsFromModelObject(DOMModelObject);
            browser.tabs.sendMessage(tabs[0].id, {action: 'restore', uuids: uuids});

            DOMModelObject = null;
            regexOccurrenceMap = null;
            index = null;
            regex = null;
        });

        //Perform init action
        browser.tabs.sendMessage(tabs[0].id, {action: 'init'}, function (response) {
            if(response && response.model) {
                DOMModelObject = response.model;
                index = 0;
            }
        });
    });
});


//Build occurrence map from DOM model and regex
function buildOccurrenceMap(DOMModelObject, regex, options) {
    var occurrenceMap = {occurrenceIndexMap: {}, length: null, groups: null};
    var count = 0, groupIndex = 0;
    regex = regex.replace(/ /g, '\\s');

    if(options && options.match_case)
        regex = new RegExp(regex, 'gm');
    else
        regex = new RegExp(regex, 'gmi');

    //Loop over all text nodes in DOMModelObject
    for(var key in DOMModelObject) {
        var textNodes = DOMModelObject[key].group, preformatted = DOMModelObject[key].preformatted;
        var textGroup = '', uuids = [];
        for(var nodeIndex = 0; nodeIndex < textNodes.length; nodeIndex++) {
            textGroup += textNodes[nodeIndex].text;
            uuids.push(textNodes[nodeIndex].elementUUID);
        }

        var matches = textGroup.match(regex);
        if(!matches)
            continue;

        count += matches.length;
        occurrenceMap[groupIndex] = {text: textGroup, uuids: uuids, count: matches.length, preformatted: preformatted};

        for(var matchesIndex = 0; matchesIndex < matches.length; matchesIndex++) {
            var occMapIndex = matchesIndex + (count - matches.length);
            occurrenceMap.occurrenceIndexMap[occMapIndex] = {groupIndex: groupIndex, subIndex: matchesIndex};
        }

        groupIndex++;

        //If reached maxIndex, exit
        if(options && options.max_results != 0 && count >= options.max_results)
            break;
    }

    occurrenceMap.length = count;
    occurrenceMap.groups = groupIndex;
    return occurrenceMap;
}

//Get all group uuids from model object
function getUUIDsFromModelObject(modelObject) {
    var uuids = [];

    for(var key in modelObject) {
        var textNodes = modelObject[key].group;
        for(var index = 0; index < textNodes.length; index++)
            uuids.push(textNodes[index].elementUUID);
    }

    return uuids;
}